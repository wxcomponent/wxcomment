/******************************************************************
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Mora <qiuzhongleiabc@126.com> (https://github.com/qiu8310)
*******************************************************************/
import { BaseApp } from './BaseApp';
import { PolluteOptions } from '../util';
export interface BaseComponent<D, A extends BaseApp> extends Component, Component.Options {
    /**
     * 建议使用组件的 setDataSmart 方法
     *
     * 两者用法一样，但 setDataSmart 支持数据双向绑定
     */
    setData(data: Partial<D>, callback?: () => void): void;
    /** 组件生命周期函数，在组件实例进入页面节点树时执行，注意此时不能调用 setData */
    onCreated?(): any;
    /** 组件生命周期函数，在组件实例进入页面节点树时执行 */
    onAttached?(): any;
    /** 组件生命周期函数，在组件布局完成后执行，此时可以获取节点信息（使用 SelectorQuery ） */
    onReady?(): any;
    /** 组件生命周期函数，在组件实例被移动到节点树另一个位置时执行 */
    onMoved?(): any;
    /** 组件生命周期函数，在组件实例被从页面节点树移除时执行 */
    onDetached?(): any;
    /**
     * 组件属性更新时会调用此函数
     *
     * **注意：外部组件传值变化，或内部组件 setData 改变 prop 都会触发此函数**
     *
     * @param {string} prop 属性名
     * @param {*} newValue 新属性值
     * @param {*} oldValue 旧属性值
     * @memberof BaseComponent
     */
    onPropUpdate?(prop: string, newValue: any, oldValue: any): any;
}
export declare class BaseComponent<D, A extends BaseApp> {
    /**
     * 组件的内部数据
     *
     * 和 properties 一同用于组件的模版渲染
     */
    readonly data: D;
    /**
     * App 实例
     */
    readonly app: A;
    /**
     * 获取 App 实例，即微信原生函数 getApp() 返回的对象
     *
     * @deprecated 直接使用 this.app 即可，无需使用函数调用
     */
    getApp(): A;
    /**
     * 对 setData 的封装，不过它更新的 data 可以支持数据双向绑定
     *
     * @memberof BaseComponent
     */
    setDataSmart(data: Partial<D>, callback?: () => void): void;
    private minappsyncupdate(e);
}
export interface ComifyOptions extends PolluteOptions {
    /** 指定要注入的 mixin */
    mixins?: Component.Options[];
}
/**
 * 将一个继承了 BaseComponent 的类转化成 小程序 Component 的调用
 */
export declare function comify<D, A extends BaseApp>(options?: ComifyOptions, polluteObj?: (obj: any) => void): (SomeComponent: new () => BaseComponent<D, A>) => void;
